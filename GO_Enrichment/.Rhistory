BiocManager::install("topGO")
library(topGO)
writeTopGO <- function(background, foreground, GOterm, top, txt){
# give properly formatted background in format: GO:0005838	GSBRNA2T00088508001;GSBRNA2T00088313001;GSBRNA2T00035842001
annAT <- readMappings(background, sep="\t", IDsep=";")
allgenes <- unique(unlist(annAT))
# give file with your genes of interest, one gene_id per line
mygenes <-scan(foreground ,what="")
geneList <- factor(as.integer(allgenes %in% mygenes))
names(geneList) <- allgenes
GOdata <-new ("topGOdata", ontology = GOterm, allGenes = geneList, nodeSize = top, annot=annFUN.GO2genes, GO2genes=annAT)
# using ClassicCount:
#test.stat <-new ("classicCount", testStatistic = GOFisherTest, name = "Fisher Test")
#resultsFisherC <-getSigGroups (GOdata, test.stat)
# using weight01:
weight01.fisher <- runTest(GOdata, statistic = "fisher")
# using ClassicCount:
# allRes <- GenTable(GOdata, classicFisher= resultsFisherC, topNodes = 30)
# using weight01:
allRes <- GenTable(GOdata, classicFisher=weight01.fisher,topNodes=30)
names(allRes)[length(allRes)] <- "p.value"
write.table(allRes, file=txt, sep="\t",quote=FALSE,row.names=FALSE)
}
writeTopGO("./Napus_best_score_only.csv_go_terms.csv", "NewPAV_Table_with_Oleracea_Rapa_Only_genes_NapusIndsOnly_VariableGenes.txt", 'BP',5,'Napus_5topBPweight01.txt')
library("topGO")
install.packages('lattice')
library("topGO")
.SysPath
.SysPath()
.libPaths()
install.packages('lattice')
library("topGO")
writeTopGO <- function(background, foreground, GOterm, top, txt){
# give properly formatted background in format: GO:0005838	GSBRNA2T00088508001;GSBRNA2T00088313001;GSBRNA2T00035842001
annAT <- readMappings(background, sep="\t", IDsep=";")
allgenes <- unique(unlist(annAT))
# give file with your genes of interest, one gene_id per line
mygenes <-scan(foreground ,what="")
geneList <- factor(as.integer(allgenes %in% mygenes))
names(geneList) <- allgenes
GOdata <-new ("topGOdata", ontology = GOterm, allGenes = geneList, nodeSize = top, annot=annFUN.GO2genes, GO2genes=annAT)
# using ClassicCount:
#test.stat <-new ("classicCount", testStatistic = GOFisherTest, name = "Fisher Test")
#resultsFisherC <-getSigGroups (GOdata, test.stat)
# using weight01:
weight01.fisher <- runTest(GOdata, statistic = "fisher")
# using ClassicCount:
# allRes <- GenTable(GOdata, classicFisher= resultsFisherC, topNodes = 30)
# using weight01:
allRes <- GenTable(GOdata, classicFisher=weight01.fisher,topNodes=30)
names(allRes)[length(allRes)] <- "p.value"
write.table(allRes, file=txt, sep="\t",quote=FALSE,row.names=FALSE)
}
writeTopGO("./Napus_best_score_only.csv_go_terms.csv", "NewPAV_Table_with_Oleracea_Rapa_Only_genes_NapusIndsOnly_VariableGenes.txt", 'BP',5,'Napus_5topBPweight01.txt')
?readMappings
writeTopGO <- function(background, foreground, GOterm, top, txt){
# give properly formatted background in format: GO:0005838	GSBRNA2T00088508001;GSBRNA2T00088313001;GSBRNA2T00035842001
annAT <- readMappings(background, sep=" ", IDsep=";")
allgenes <- unique(unlist(annAT))
# give file with your genes of interest, one gene_id per line
mygenes <-scan(foreground ,what="")
geneList <- factor(as.integer(allgenes %in% mygenes))
names(geneList) <- allgenes
GOdata <-new ("topGOdata", ontology = GOterm, allGenes = geneList, nodeSize = top, annot=annFUN.GO2genes, GO2genes=annAT)
# using ClassicCount:
#test.stat <-new ("classicCount", testStatistic = GOFisherTest, name = "Fisher Test")
#resultsFisherC <-getSigGroups (GOdata, test.stat)
# using weight01:
weight01.fisher <- runTest(GOdata, statistic = "fisher")
# using ClassicCount:
# allRes <- GenTable(GOdata, classicFisher= resultsFisherC, topNodes = 30)
# using weight01:
allRes <- GenTable(GOdata, classicFisher=weight01.fisher,topNodes=30)
names(allRes)[length(allRes)] <- "p.value"
write.table(allRes, file=txt, sep="\t",quote=FALSE,row.names=FALSE)
}
writeTopGO("./Napus_best_score_only.csv_go_terms.csv", "NewPAV_Table_with_Oleracea_Rapa_Only_genes_NapusIndsOnly_VariableGenes.txt", 'BP',5,'Napus_5topBPweight01.txt')
writeTopGO("./Napus_best_score_only.csv_go_terms.csv", "NewPAV_Table_with_Oleracea_Rapa_Only_genes_NapusIndsOnly_VariableGenes.txt", 'BP',5,'Napus_5topBPweight01.txt')
library("topGO")
background <- gzfile('Napus_vs_Swissprot_best_score_only.csv_go_terms.csv.gz')
foreground <-
"NewPAV_Table_with_Oleracea_Rapa_Only_genes_NapusIndsOnly_VariableGenes.txt"
background <- gzfile('Napus_vs_Swissprot_best_score_only.csv_go_terms.csv.gz', 'rt')
foreground <-
"NewPAV_Table_with_Oleracea_Rapa_Only_genes_NapusIndsOnly_VariableGenes.txt"
GOterm <- 'BP'
top <- 5
txt <- 'Napus_5topBPweight01.txt'
annAT <- readMappings(background, sep = " ", IDsep = ";")
allgenes <- unique(unlist(annAT))
# give file with your genes of interest, one gene_id per line
mygenes <- scan(foreground , what = "")
geneList <- factor(as.integer(allgenes %in% mygenes))
names(geneList) <- allgenes
GOdata <- new (
"topGOdata",
ontology = GOterm,
allGenes = geneList,
#nodeSize = top, # REVIGO DOES NOT USE THIS?
annot = annFUN.GO2genes,
GO2genes = annAT
)
